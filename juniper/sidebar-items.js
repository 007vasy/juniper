initSidebarItems({"enum":[["GraphQLError","An error that prevented query execution"],["InputValue","A JSON-like value that can be passed into the query execution, either out-of-band, or in-band as default variable values. These are _not_ constant and might contain variables."],["Selection","Entry in a GraphQL selection set"],["Type","A type literal in the syntax tree"],["TypeKind","GraphQL type kind"],["Value","Serializable value returned from query and field execution."]],"fn":[["execute","Execute a query in a provided schema"]],"macro":[["graphql_enum!","Expose simple enums"],["graphql_input_object!","Create an input object"],["graphql_interface!","Expose GraphQL interfaces"],["graphql_object!","Expose GraphQL objects"],["graphql_scalar!","Expose GraphQL scalars"]],"mod":[["iron_handlers","Optional handlers for the Iron framework. Requires the `iron-handlers` feature enabled."],["meta","Types used to describe a GraphQL schema"],["parser","Query parser and language utilities"],["validation","Query validation related methods and data structures"]],"struct":[["Arguments","Field argument container"],["ExecutionError","Error type for errors that occur during query execution"],["Executor","Query execution engine"],["ID","An ID as defined by the GraphQL specification"],["Registry","A type registry used to build schemas"],["RootNode","Root query node of a schema"]],"trait":[["FromInputValue","Parse an unstructured input value into a Rust data type."],["GraphQLType","Primary trait used to expose Rust types in a GraphQL schema"],["IntoFieldResult","Convert a value into a successful field result"],["ToInputValue","Losslessly clones a Rust data type into an InputValue."]],"type":[["ExecutionResult","The result of resolving an unspecified field"],["FieldResult","The result of resolving the value of a field of type `T`"]]});